from aiogram import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from config import *
from users_handler import *
from order_handler import *
from buy_handler import *
from time import sleep
from requests import get, post
from json import loads
from crypto import transfer

bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    info = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if getUser(message.from_user.id) is None:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
        await bot.send_message(message.from_user.id, f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.", reply_markup=keyboard)
    else:
        buttons = InlineKeyboardMarkup()
        buttons.add(InlineKeyboardButton("üí∏ –ú–∞—Ä–∫–µ—Ç", callback_data='market'))

        await bot.send_message(message.from_user.id, "üâê –î–æ–±—Ä—ã–π –¥–µ–Ω—å.\n–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫–∞–∫ –ø—Ä–æ–¥–∞—Ç—å —Ç–∞–∫ –∏ –∫—É–ø–∏—Ç—å @username –≤ Telegram.\n" + 
                            "–ù–∞—à–∞ –ø–ª–æ—â–∞–¥–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ —Ç–µ–º, —á—Ç–æ —Å–¥–µ—Å—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±–º–∞–Ω—É—Ç—å –∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏.", reply_markup=buttons)

hash = ""
order_by = None
@dp.callback_query_handler(lambda call: types.CallbackQuery)
async def query(call: types.CallbackQuery, state: FSMContext):
    user = getUser(call.from_user.id)
    global hash, order_by
    if call.data == 'start':
        buttons = InlineKeyboardMarkup()
        buttons.add(InlineKeyboardButton("üí∏ –ú–∞—Ä–∫–µ—Ç", callback_data='market'))

        await call.bot.edit_message_text(
            text="üâê –î–æ–±—Ä—ã–π –¥–µ–Ω—å.\n–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫–∞–∫ –ø—Ä–æ–¥–∞—Ç—å —Ç–∞–∫ –∏ –∫—É–ø–∏—Ç—å @username –≤ Telegram.\n" + 
                            "–ù–∞—à–∞ –ø–ª–æ—â–∞–¥–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ —Ç–µ–º, —á—Ç–æ —Å–¥–µ—Å—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±–º–∞–Ω—É—Ç—å –∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏.",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=buttons
        )
    elif call.data == 'market':
        buttons = InlineKeyboardMarkup()
        buttons.add(InlineKeyboardButton("üëõ –ö—É–ø–∏—Ç—å", callback_data='buy'))
        buttons.add(InlineKeyboardButton("ü™ô –ü—Ä–æ–¥–∞—Ç—å", callback_data='sell'))
        buttons.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start'))

        await call.bot.edit_message_text(
            text="üí† –í –º–∞—Ä–∫–µ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ: –ø—Ä–æ–¥–∞—Ç—å, –∫—É–ø–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º—ã –ª—é–¥–µ–π.",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=buttons
        )
    elif call.data == 'sell':
        await Form.info.set()
        await call.bot.edit_message_text(
            text="üí† –ù–∞–ø–∏—à–∏ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º @username –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å—è–≤–ª–µ–Ω–∏—è.\n" + 
            "`–¢—É—Ç –≤–∞—à @username\n–¢—É—Ç –≤–∞—à–∞ —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö`",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            parse_mode='markdown'
        )
    elif call.data == 'buy':
        buttons = InlineKeyboardMarkup()
        for currentOrder in getAllOrders():
            buttons.add(InlineKeyboardButton(f"{currentOrder[1]} {currentOrder[2]}‚ÇΩ {currentOrder[3]}", callback_data=f'{currentOrder[4]}'))
        buttons.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='market'))
        await call.bot.edit_message_text(
            text="üí† –í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=buttons
        )
    elif call.data == 'check_payment':
        get_invoices_url = 'https://testnet-pay.crypt.bot/api/getInvoices'
        headers = {'Crypto-Pay-API-Token': Crypto_API_TESTNET}
        response = get(get_invoices_url, headers=headers)
        jsonResult = loads(response.text)
        status = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
        for currentDict in jsonResult['result']['items']:
            if currentDict['hash'] == hash:
                if currentDict['status'] == 'paid':
                    status = currentDict['status']
                    break
        if status == 'paid':
            buttons = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≤—è–∑–∫—É", callback_data='complete'))
            await call.bot.edit_message_text(
                text=f'üí† –°—á–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –°–µ–π—á–∞—Å –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤—è–∂–µ—Ç –µ–≥–æ –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ.',
                chat_id=call.from_user.id,
                message_id=call.message.message_id
            )
            await bot.send_message(getOrder(order_by)['id'], f"üí† –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º {getOrder(order_by)['username']} –ø—Ä–∏–æ–±—Ä–µ–ª–∏, –æ—Ç–≤—è–∂–∏—Ç–µ –µ–≥–æ –æ—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —é–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏.", reply_markup=buttons)
            
        else:
            await bot.send_message(call.from_user.id, "‚õîÔ∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω.")
        await call.answer()
    elif call.data == 'complete':
        await bot.send_message(getOrder(order_by)['id'], "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü –∑–∞–π–¥–µ—Ç –≤ —Å–µ—Ç—å.")
        await call.answer()
        buttons = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data='complete_o'))
        await bot.send_message(getPurchase(call.from_user.id)[2], "üåü –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤—è–∑–∞–ª –Ω–∏–∫–Ω–µ–π–º –æ—Ç —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞/—é–∑–µ—Ä–∞.\n–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å–µ–±–µ –∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.", reply_markup=buttons)
    elif call.data == 'complete_o':
        await bot.send_message(getPurchase(getOrder(order_by)['id'])[2], "üéä –¢–µ–ø–µ—Ä—å —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞—à !")
        await call.answer()
        await bot.send_message(getOrder(order_by)['id'], "üî• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ. –°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏...")
        transfer(float(getOrder(order_by)['price']) / 90, getOrder(order_by)['id']) # –∫–æ–º–º–∏—Å–∏—é —Å–¥–µ–ª–∞—Ç—å
        # stop ship
        removeOrder(order_by)
        removePurchase(call.from_user.id)
    else:
        order_by = call.data
        order = getOrder(call.data)
        sell_id = order['id']
        price = order['price']
        username = order['username']
        buy_id = call.from_user.id
        createBuyOrder(sell_id, buy_id, username, price)
        print(f"–ê–ª–ª –ø–æ–∫—É–ø–∫–∏: {getAllPurchases()}")
        price = float(order['price']) / 90
        headers = {'Crypto-Pay-API-Token': Crypto_API_TESTNET}
        data = {
            'asset': "USDT",
            'amount': float(price),
            'description': f"–ü–æ–∫—É–ø–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞",
            'expires_in': 600
        }
        response = post("https://testnet-pay.crypt.bot/api/createInvoice", headers=headers, data=data)
        json_converted = loads(response.text)

        hash = json_converted['result']['hash']

        buttons = InlineKeyboardMarkup()
        buttons.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=json_converted['result']['pay_url']))
        buttons.add(InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='check_payment'))
        buttons.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='buy'))
        await call.answer()
        await call.bot.edit_message_text(
                text=f"üí† –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º *{order['username']}* –∑–∞ *{order['price']}‚ÇΩ*\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–æ–ø–ª–∞—Ç–∏—Ç—å*.",
                chat_id=call.from_user.id,
                message_id=call.message.message_id,
                reply_markup=buttons,
                parse_mode='markdown'
            )

@dp.message_handler(state=Form.info)
async def processInfo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['info'] = message.text
    array = data['info'].split('\n')
    if len(array) < 2 and array[2] < 150:
        await bot.send_message(message.from_user.id, "üí† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞.")
    else:
        await bot.send_message(message.from_user.id, "‚åõÔ∏è")
        sleep(3.5)
        addOrder(message.from_user.id, array[0], array[1])
        buttons = InlineKeyboardMarkup().add(InlineKeyboardButton('üí† –í –º–µ–Ω—é', callback_data='start'))
        await bot.send_message(message.from_user.id, f"üí† –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ {array[0]} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ.", parse_mode='markdown', reply_markup=buttons)
    await state.finish()

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def processContact(message: types.Message):
    phone_number = message.contact.phone_number
    buttons = InlineKeyboardMarkup().add(InlineKeyboardButton("üí† –í –º–µ–Ω—é", callback_data="start"))
    await bot.send_message(message.from_user.id, "üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.", reply_markup=buttons)
    addUser(message.from_user.id, phone_number)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)